AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create VPC, subnets, NAT, and EC2 instance.

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NATGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  AssociatePublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssociatePublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  AssociatePrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  AssociatePrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to specific ports
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MySecurityGroup

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PublicSubnet1
      ImageId: ami-0c94855ba95c71c99 # Replace with a valid AMI ID for your region
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo apt update -y
          sudo apt install -y mysql-server git apache2
          sudo sed -i "s/bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/mysql.conf.d/mysqld.cnf
          sudo systemctl start mysql
          sudo mysql -e "SELECT 1 FROM mysql.user WHERE user='root' AND host='%' LIMIT 1;" | grep -q 1 || sudo mysql -e "CREATE USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'qwer1234';"
          sudo mysql -uroot -pqwer1234 -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'qwer1234';"
          sudo mysql -uroot -pqwer1234 -e "CREATE DATABASE IF NOT EXISTS finance_app;"
          sudo mysql -uroot -pqwer1234 -e "FLUSH PRIVILEGES;"
          git clone https://github.com/jeonghun-app/dr-workshop-app.git /home/ubuntu/dr-workshop
          sudo mysql -uroot -pqwer1234 finance_app < /home/ubuntu/dr-workshop/DB/database_structure.sql
          sudo mysql -uroot -pqwer1234 -e "CREATE USER IF NOT EXISTS 'finance_user'@'localhost' IDENTIFIED BY 'yourpassword';"
          sudo mysql -uroot -pqwer1234 -e "GRANT ALL PRIVILEGES ON finance_app.* TO 'finance_user'@'localhost';"
          sudo mysql -uroot -pqwer1234 -e "FLUSH PRIVILEGES;"
          sudo ufw allow 3306/tcp
          curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
          sudo apt install -y nodejs
          cd /home/ubuntu/dr-workshop/WAS
          npm install
          nohup node index.js -- -p 5000 &
          cd /home/ubuntu/dr-workshop/web-app
          npm install
          npm run build
          nohup npm start -- -p 3000 &
          sudo apt install -y apache2
          sudo a2enmod proxy proxy_http rewrite
          cat <<EOF | sudo tee /etc/apache2/sites-available/000-default.conf
          <VirtualHost *:80>
              ProxyPass "/api" "http://localhost:5000/api"
              ProxyPassReverse "/api" "http://localhost:5000/api"
              ProxyPreserveHost On
              ProxyPass "/" "http://localhost:3000/"
              ProxyPassReverse "/" "http://localhost:3000/"
          </VirtualHost>
          EOF
          sudo systemctl restart apache2
      Tags:
        - Key: Name
          Value: MyInstance
