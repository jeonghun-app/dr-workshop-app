#!/bin/bash
set -e

# Update and install required packages
sudo apt update -y
sudo apt install -y mysql-server git apache2 curl unzip

# Clone the application repository
git clone https://github.com/jeonghun-app/dr-workshop-app.git /home/ubuntu/dr-workshop

# Configure MySQL
sudo sed -i "s/bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/mysql.conf.d/mysqld.cnf
sudo systemctl start mysql
sudo systemctl enable mysql

# MySQL initial setup
sudo mysql -e "SELECT 1 FROM mysql.user WHERE user='root' AND host='%' LIMIT 1;" | grep -q 1 || sudo mysql -e "CREATE USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'qwer1234';"
sudo mysql -uroot -pqwer1234 -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'qwer1234';"
sudo mysql -uroot -pqwer1234 -e "CREATE DATABASE IF NOT EXISTS finance_app;"
sudo mysql -uroot -pqwer1234 -e "FLUSH PRIVILEGES;"

# Import database schema if available
if [ -f "/home/ubuntu/dr-workshop/DB/database_structure.sql" ]; then
  sudo mysql -uroot -pqwer1234 finance_app < /home/ubuntu/dr-workshop/DB/database_structure.sql
else
  echo "Skipping schema import, file not found"
fi

# Configure additional MySQL users
sudo mysql -uroot -pqwer1234 -e "CREATE USER IF NOT EXISTS 'finance_user'@'localhost' IDENTIFIED BY 'yourpassword';"
sudo mysql -uroot -pqwer1234 -e "GRANT ALL PRIVILEGES ON finance_app.* TO 'finance_user'@'localhost';"
sudo mysql -uroot -pqwer1234 -e "CREATE USER IF NOT EXISTS 'dms_user'@'%' IDENTIFIED BY 'dms_password';"
sudo mysql -uroot -pqwer1234 -e "GRANT SELECT, RELOAD, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'dms_user'@'%';"
sudo mysql -uroot -pqwer1234 -e "FLUSH PRIVILEGES;"

# Enable MySQL replication logs
sudo sed -i '/\[mysqld\]/a server-id=1\nlog-bin=mysql-bin\nbinlog_format=row\nexpire_logs_days=7' /etc/mysql/mysql.conf.d/mysqld.cnf
sudo systemctl restart mysql

# Allow MySQL through firewall
sudo ufw allow 3306/tcp

# Install Node.js
curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt install -y nodejs

# Setup the WAS application
cd /home/ubuntu/dr-workshop/WAS
npm install
cat <<EOF > /home/ubuntu/dr-workshop/WAS/cors.js
const corsOptions = {
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
};
module.exports = corsOptions;
EOF
nohup node index.js -- -p 5000 &

# Setup the web application
cd /home/ubuntu/dr-workshop/web-app
npm install
PUBLIC_IP=$(curl -s https://checkip.amazonaws.com/)
echo "NEXT_PUBLIC_BACKEND_URL=http://$PUBLIC_IP:5000" > /home/ubuntu/dr-workshop/web-app/.env
npm run build
nohup npm start -- -p 3000 &

# Configure Apache as reverse proxy
sudo apt install -y apache2
sudo a2enmod proxy proxy_http rewrite
cat <<EOF | sudo tee /etc/apache2/sites-available/000-default.conf
<VirtualHost *:80>
  ProxyPass "/api" "http://localhost:5000/api"
  ProxyPassReverse "/api" "http://localhost:5000/api"
  ProxyPreserveHost On
  ProxyPass "/" "http://localhost:3000/"
  ProxyPassReverse "/" "http://localhost:3000/"
</VirtualHost>
EOF
sudo systemctl restart apache2
sudo systemctl enable apache2

# Install AWS CLI
sudo apt update -y
sudo apt install -y unzip
sudo apt remove -y awscli
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
aws --version

# Deploy CloudFormation stacks if templates are available
cd /home/ubuntu/dr-workshop
if [ -f awsdrs-vpc.json ] && [ -f drs-site-vpc.json ]; then
  echo "Deploying awsdrs-vpc-stack with IAM capabilities"
  aws cloudformation deploy \
    --template-file awsdrs-vpc.json \
    --stack-name awsdrs-vpc-stack \
    --region ap-northeast-2 \
    --capabilities CAPABILITY_NAMED_IAM

  echo "Deploying drs-site-vpc-stack with IAM capabilities"
  aws cloudformation deploy \
    --template-file drs-site-vpc.json \
    --stack-name drs-site-vpc-stack \
    --region ap-northeast-2 \
    --capabilities CAPABILITY_NAMED_IAM
else
  echo "VPC templates not found. Skipping deployment."
fi
