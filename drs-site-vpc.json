{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CloudFormation template to create a VPC with Aurora RDS using MySQL 8.0",
  "Parameters": {
    "VpcCidr": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "CIDR block for the VPC"
    },
    "PublicSubnet1Cidr": {
      "Type": "String",
      "Default": "10.0.1.0/24",
      "Description": "CIDR block for Public Subnet 1"
    },
    "PublicSubnet2Cidr": {
      "Type": "String",
      "Default": "10.0.2.0/24",
      "Description": "CIDR block for Public Subnet 2"
    },
    "PrivateSubnet1Cidr": {
      "Type": "String",
      "Default": "10.0.3.0/24",
      "Description": "CIDR block for Private Subnet 1"
    },
    "PrivateSubnet2Cidr": {
      "Type": "String",
      "Default": "10.0.4.0/24",
      "Description": "CIDR block for Private Subnet 2"
    }
  },
  "Resources": {
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidr"
        },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "DRS-SITE"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "DRS-IGW"
          }
        ]
      }
    },
    "VpcGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PublicSubnet1Cidr"
        },
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": {
          "Fn::Select": [0, {
            "Fn::GetAZs": ""
          }]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DRS-Public-Subnet-1"
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PublicSubnet2Cidr"
        },
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": {
          "Fn::Select": [1, {
            "Fn::GetAZs": ""
          }]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DRS-Public-Subnet-2"
          }
        ]
      }
    },
    "NatEIP": {
      "Type": "AWS::EC2::EIP"
    },
    "NatGateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "AllocationId": {
          "Fn::GetAtt": ["NatEIP", "AllocationId"]
        }
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet1Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [0, {
            "Fn::GetAZs": ""
          }]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DRS-Private-Subnet-1"
          }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet2Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [1, {
            "Fn::GetAZs": ""
          }]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DRS-Private-Subnet-2"
          }
        ]
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DRS-Public-Route-Table"
          }
        ]
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DRS-Private-Route-Table"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway"
        }
      }
    },
    "AuroraCluster": {
      "Type": "AWS::RDS::DBCluster",
      "Properties": {
        "Engine": "aurora-mysql",
        "EngineVersion": "8.0.mysql_aurora.3.05.2",
        "MasterUsername": "root",
        "MasterUserPassword": "qwer1234",
        "DBSubnetGroupName": {
          "Ref": "AuroraSubnetGroup"
        },
        "VpcSecurityGroupIds": [
          {
            "Ref": "AuroraSecurityGroup"
          }
        ]
      }
    },
    "AuroraSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for Aurora",
        "SubnetIds": [
          {
            "Ref": "PrivateSubnet1"
          },
          {
            "Ref": "PrivateSubnet2"
          }
        ]
      }
    },
    "AuroraSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow database access",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3306,
            "ToPort": 3306,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    }
  },
  "Outputs": {
    "AuroraClusterEndpoint": {
      "Description": "Aurora Cluster Endpoint",
      "Value": {
        "Fn::GetAtt": ["AuroraCluster", "Endpoint.Address"]
      }
    },
    "AuroraReadEndpoint": {
      "Description": "Aurora Read Endpoint",
      "Value": {
        "Fn::GetAtt": ["AuroraCluster", "ReadEndpoint.Address"]
      }
    }
  }
}
